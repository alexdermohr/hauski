name: CI (smart PR)

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]
  merge_group: {}
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RUSTFLAGS: "-Dwarnings"
  toolchain: stable

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      docs: ${{ steps.filter.outputs.docs }}
      policy_limits: ${{ steps.filter.outputs.policy_limits }}
      any:  ${{ steps.filter.outputs.any }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            rust:
              - '**/*.rs'
              - '**/Cargo.toml'
              - '**/Cargo.lock'
              - 'crates/**'
            docs:
              - '**/*.md'
            policy_limits:
              - 'policies/limits.yaml'
            any:
              - '**'

  lint:
    name: rustfmt + clippy
    needs: changes
    if: >
      (github.event_name == 'merge_group') ||
      (github.event_name != 'merge_group' &&
       github.event.pull_request.draft == false &&
       (needs.changes.outputs.rust == 'true' || contains(join(github.event.pull_request.labels.*.name), 'full-ci')))
    runs-on: ubuntu-latest
    env:
      toolchain: stable
      RUSTFLAGS: -Dwarnings
    timeout-minutes: 12
    steps:
      - uses: actions/checkout@v4
      - name: Enable Rust problem matchers
        run: echo "::add-matcher::.github/rust.json"
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.toolchain }}
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - name: rustfmt (check)
        run: cargo fmt --all --check
      - name: clippy (deny warnings)
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  links:
    name: docs link check (lychee)
    needs: changes
    if: >
      (github.event_name == 'merge_group') ||
      (github.event_name != 'merge_group' &&
       github.event.pull_request.draft == false &&
       (needs.changes.outputs.docs == 'true' || contains(join(github.event.pull_request.labels.*.name), 'full-ci')))
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: lycheeverse/lychee-action@v2
        with:
          args: >-
            --no-progress
            --verbose
            --retry-wait-time 2
            --max-redirects 5
            --max-retries 2
            --exclude-mail
            --accept 200,204,206,301,302,307,308
            --user-agent "lychee-ci"
            --
            "**/*.md"
      - name: Upload lychee report (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: lychee-report
          path: ./.lycheecache
          if-no-files-found: ignore

  index-budget-gate:
    name: index budget gate
    needs: [changes]
    if: >
      (github.event_name == 'merge_group') ||
      (github.event_name != 'merge_group' &&
       github.event.pull_request.draft == false &&
       (needs.changes.outputs.rust == 'true' || contains(join(github.event.pull_request.labels.*.name), 'full-ci')))
    runs-on: ubuntu-latest
    steps:
      - name: Emit TODO notice
        run: |
          echo "::warning::index-budget-gate placeholder – TODO: hook up vegeta/k6 export once available"
          echo "Skipping enforcement for now."

  deny:
    name: cargo-deny
    needs: lint
    if: always() && !cancelled()
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check bans sources advisories

  audit:
    name: cargo audit
    needs: lint
    if: always() && !cancelled()
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: targeted tests (nextest)
    needs: [lint]
    if: >
      (github.event_name == 'merge_group') ||
      (github.event_name != 'merge_group' &&
       github.event.pull_request.draft == false)
    runs-on: ubuntu-latest
    env:
      toolchain: stable
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      # Toolchains & cache
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.toolchain }}
      - uses: Swatinem/rust-cache@v2

      # nextest (faster tests) & optional tools
      - uses: taiki-e/install-action@v2
        with:
          tool: nextest

      # Determine changed crates by package compared to the base
      - name: Compute changed crates
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="origin/${{ github.base_ref }}"
            git fetch --no-tags --depth=1 origin "${{ github.base_ref }}"
            FILES=$(git diff --name-only "$BASE"...HEAD || true)
          else
            # merge_group / workflow_dispatch → no base: fall back to workspace
            FILES=""
          fi
          echo "$FILES" > /tmp/changed.txt
          CRATES=$(grep -E '^crates/[^/]+/' /tmp/changed.txt | awk -F/ '{print $2}' | sort -u || true)
          echo "changed=$CRATES" >> "$GITHUB_OUTPUT"

      # Label logic: 'full-ci' enforces full workspace tests
      - name: Decide test scope
        id: scope
        shell: bash
        run: |
          labels="${{ github.event.pull_request.number && join(github.event.pull_request.labels.*.name, ' ') || '' }}"
          if echo "$labels" | grep -qiE '(^| )full-ci( |$)'; then
            echo "mode=workspace" >> "$GITHUB_OUTPUT"
          elif [[ -n "${{ steps.diff.outputs.changed }}" ]]; then
            echo "mode=changed" >> "$GITHUB_OUTPUT"
          else
            echo "mode=workspace" >> "$GITHUB_OUTPUT"
          fi

      - name: Run tests (targeted or workspace)
        shell: bash
        run: |
          set -euo pipefail
          MODE="${{ steps.scope.outputs.mode }}"
          if [[ "$MODE" == "changed" ]]; then
            for pkg in ${{ steps.diff.outputs.changed }}; do
              echo "==> testing crate: $pkg"
              cargo nextest run -p "$pkg" --all-features --no-fail-fast
            done
          else
            echo "==> testing workspace"
            cargo nextest run --workspace --all-features --no-fail-fast
          fi
